#!/usr/bin/env bash

set -e

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Confirm?} [Y/n] " response
    case "$response" in
        [nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

function sync_origin() {
    branch=$1
    # nothing to do if remote branch exists and is in sync
    if (git rev-parse --verify --quiet origin/$branch > /dev/null) && \
        [ x"$(git rev-parse $branch)" == x"$(git rev-parse origin/$branch)" ]; then
        true
    else
        if confirm "Branch '$branch' is not in sync with 'origin/$branch'. Do you want me to push for you?"; then
            git push origin $branch
        else
            gracefully_abort
        fi
    fi
}

function help_and_exit() {
    echo -e "${RED}The pull base branches are not configured.${NC}"
    echo "You can set the pull base branches for this project with:"
    echo "git config pretty-pull-request.pull-bases \"preprod prod\"" | indent
    exit 1
}

function inexistant_pull_base() {
    echo -e "${RED}The branch $1 that you're trying to use as a pull base doesn't exist${NC}"
    exit 1
}

function gracefully_abort() {
    echo "Aborted, no pull request opened"
    exit 0
}

function indent() {
    sed 's/^/    /'
}

function load_testing_mocks() {
    # I haven't found a clean way to mock commands transparently so...
    [ "$GIT_PRETTY_PR_TEST" = "true" ] || return 0
    for mock in tests/mocks/*.sh ; do
        . $mock
    done
}

load_testing_mocks
config_branches=$(git config pretty-pull-request.pull-bases || echo "error")
[ "$config_branches" = "error" ] && help_and_exit

IFS=' ' read -ra branches <<< "$config_branches"

# If there's an argument, it's the PR message. Else, the message is the last commit message
[ -z "$1" ] && msg=$(git log -1 --pretty=%B)
[ -z "$msg" ] && msg=$1

# Initialize useful vars
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
git fetch --all
i=0
while [ $i -lt ${#branches[@]} ]; do
    prefixes[i]=${branches[i]^^}
    messages[i]="[${prefixes[i]}] $msg"
    remotes[i]="origin/${branches[i]}"
    i=$[$i+1]
done
head=$(git rev-parse --abbrev-ref HEAD)

# Print summary and ask confirmation
i=0
while [ $i -lt ${#branches[@]} ]; do
    # Get the commits not yet merged on the pull base
    diff=$(git log --color --cherry --oneline ${remotes[i]}..$head 2> /dev/null || echo "error")
    [ "$diff" = "error" ] && inexistant_pull_base "${remotes[i]}"
    echo -e "${GREEN}${messages[i]}${NC} -> ${RED}${remotes[i]}${NC}"
    # git log shows the latest commit at the top, Github shows it at the bottom.
    # The tac command reverse the order of the lines to be consistent with Github.
    echo "$diff" | indent | tac
    i=$[$i+1]
done
echo

sync_origin $head origin/$head
confirm "Create ${#branches[@]} pull requests?" || gracefully_abort

# Open pull requests
i=0
while [ $i -lt ${#branches[@]} ]; do
    echo -n "[${prefixes[i]}]: "
    hub pull-request -m "${messages[i]}" -b ${branches[i]} -h $head
    i=$[$i+1]
done

