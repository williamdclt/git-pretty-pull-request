#!/usr/bin/env bash

set -e

confirm() {
    # call with a prompt string or use a default
    printf "${1:-Confirm?} [Y/n] "
    read -r response
    case "$response" in
        [nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

print_and_copy() {
    read msg
    [ -z "$msg" ] && return

    echo "$msg"
    if command -v pbcopy >/dev/null; then
        echo "$msg" | pbcopy
    elif command -v xclip >/dev/null; then
        echo "$msg" | xclip -selection clipboard
    fi
}

function join() {
    local IFS="$1"; shift; echo "$*";
}

function trim() {
    sed -e '1s/^[[:space:]]*//' -e '$s/[[:space:]]*$//'
}

function prefix() {
    sed "s/^/$1 /"
}

function indent() {
    prefix "   "
}

function single_base() {
    [ ${#branches[@]} -eq 1 ]
}

function init() {
    rootDir=$(git rev-parse --show-toplevel)
    msgFile=$rootDir/.git/PRETTY_PR_EDITMSG
    config_branches=$(git config pretty-pull-request.pull-bases || echo "error")
    flag_type=$(git config pretty-pull-request.flag-type || echo "prefix")
    [ "$config_branches" = "error" ] && help_and_exit
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    head=$(git rev-parse --abbrev-ref HEAD)

    IFS=' ' read -ra branches <<< "$config_branches"
}

function sync_origin() {
    git fetch --quiet
    branch=$1
    # nothing to do if remote branch exists and is in sync
    if (git rev-parse --verify --quiet origin/$branch) && \
        [ x"$(git rev-parse $branch)" == x"$(git rev-parse origin/$branch)" ]; then
        true
    else
        git push origin $branch --quiet
    fi
}

function help_and_exit() {
    echo -e "${RED}The pull base branches are not configured.${NC}"
    echo "You can set the pull base branches for this project with:"
    echo -e "    ${BLUE}git config pretty-pull-request.pull-bases \"preprod prod\"${NC}"
    exit 1
}

function unknown_flag_exit() {
    echo -e "${RED}Unknown flag_type: ${flag_type}${NC}"
    echo "Valid flag types are prefix and label"
    exit 1
}

function inexistant_pull_base() {
    echo -e "${RED}The branch $1 that you're trying to use as a pull base doesn't exist${NC}"
    exit 1
}

function no_pr_message() {
    echo -e "${RED}Aborting due to empty pull request title${NC}"
    exit 1
}

function gracefully_abort() {
    echo -e "${RED}Aborted, no pull request opened${NC}"
    exit 0
}

function should_open_editor() {
   [ -e $rootDir/PULL_REQUEST_TEMPLATE ] || [ -e $rootDir/.github/PULL_REQUEST_TEMPLATE ] ||
   [ -e $rootDir/PULL_REQUEST_TEMPLATE.md ] || [ -e $rootDir/.github/PULL_REQUEST_TEMPLATE.md ]
}

function get_pull_request_message() {
    # If there's an argument, it's the PR message. Else, the message is the last commit message
    [ -z "$1" ] && msg=$(git log -1 --pretty=%B)
    [ -z "$msg" ] && msg=$1

    if ! should_open_editor; then
        echo "$msg"
        return 0
    fi

    template=$(cat $rootDir/PULL_REQUEST_TEMPLATE $rootDir/.github/PULL_REQUEST_TEMPLATE $rootDir/PULL_REQUEST_TEMPLATE.md $rootDir/.github/PULL_REQUEST_TEMPLATE.md 2> /dev/null)

    msg="$msg

$template

; Requesting a pull to branches $(join ', ' ${branches[@]})
; Please enter your pull request message above. Lines beginning with ';' will
; be ignored, and an empty message aborts the pull request opening.
; You'll be able to check your pull requests before opening
; them."

    echo "$msg" > "$msgFile"
    ${EDITOR:-vim} "$msgFile" < $(tty) > $(tty) # opens editor
    sed -e '/^;.*$/d' "$msgFile" # remove comments
}


init
sync_origin $head origin/$head

# opens editor if necessary and trim
if [ -f "$msgFile" ] && confirm "Continue aborted PR message?"; then
    ${EDITOR:-vim} "$msgFile" < $(tty) > $(tty) # opens editor
    msg=$(sed -e '/^;.*$/d' "$msgFile" | trim)
else
    msg=$(get_pull_request_message "$1" | trim)
fi

[[ "$msg" = *[![:space:]]* ]] || no_pr_message
msgTitle=$(echo "$msg" | head -n 1)

i=0
while [ $i -lt ${#branches[@]} ]; do
    prefixes[i]=$(echo "${branches[i]}" | tr "[a-z]" "[A-Z]")
    remotes[i]="origin/${branches[i]}"
    i=$[$i+1]
done

! single_base && echo -e "${BLUE}${#branches[@]} pull requests will be opened with the message:${NC}"
single_base && echo -e "${BLUE}A pull request will be opened with the message:${NC}"
echo "$msg" | prefix '|' | indent
echo

# Print summary and ask confirmation
i=0
while [ $i -lt ${#branches[@]} ]; do
    # Get the commits not yet merged on the pull base
    # git log shows the latest commit at the top, Github shows it at the bottom.
    # The --reverse argument reverse the order of the lines to be consistent with Github.
    diff=$(git log --reverse --color --cherry --oneline ${remotes[i]}..$head\
        2> /dev/null || echo "error")
    [ "$diff" = "error" ] && inexistant_pull_base "${remotes[i]}"
    ! single_base && echo -e "${BLUE}[${prefixes[i]}] $msgTitle"
    single_base && echo -e "${BLUE}Commits:"
    echo "$diff" | indent
    i=$[$i+1]
done
echo -e "${NC}"

confirm || gracefully_abort

# Open pull requests
i=0
while [ $i -lt ${#branches[@]} ]; do
    if single_base; then
        hub pull-request -m "$msg" -b ${branches[i]} -h $head | print_and_copy || true
    else
        echo -n "[${prefixes[i]}]: "
        if [ $flag_type = "prefix" ]
        then
            hub pull-request -m "[${prefixes[i]}] $msg" -b ${branches[i]} -h $head | print_and_copy || true
        elif [ $flag_type = "label" ]
        then
            hub pull-request -m "$msg" -b ${branches[i]} -l ${branches[i]} -h $head | print_and_copy || true
        else
            unknown_flag_exit
        fi
    fi
    i=$[$i+1]
done
echo -e "${YELLOW}This last URL is in your clipboard${NC}"

[ ! -e "$msgFile" ] || rm "$msgFile"
